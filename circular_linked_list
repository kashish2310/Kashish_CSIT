#include<iostream>
#include<map>
using namespace std;

class node
{
   public:
   int data;
   node* next;


   node(int data){
       this->data=data;
       this->next=NULL;
   }

   ~node()
   {
       int value=this->data;
       if(this->next!=NULL)
       {
           delete next;
           next=NULL;
       }
       cout<<"element deleted "<<value<<endl;
   }
};

//insert node 
void insertnode(node* &tail,int element,int data )
{
    if(tail==NULL)
    {
        node* node1=new node(data);
        node1->next=node1;
        tail=node1;
    }
     
     else
     {
      
      node* cur=tail;
      while(cur->data!=element)
      {
          cur=cur->next;
      }
        
        node* temp=new node(data);
        temp->next=cur->next;
        cur->next=temp;

     }
}

void print(node* tail)
{
    node*temp=tail;
    if(tail==NULL)
    {
        cout<<"empty list " <<endl;
        return;
    }
    do{
        cout<<tail->data<<" ";
        tail=tail->next;
    }while(tail!=temp);
    cout<<endl;

}

void deletion(node* &tail,int value)
{
   if(tail==NULL)
   {
       cout<<" no element check list"<<endl;
       return ;
   }
    else{
        
     node *prev=tail;
     node* cur=prev->next;
     
     while(cur->data!=value)
     {  
         prev=cur;
         cur=cur->next;
     } 
      
      prev->next=cur->next;
      if(cur==prev)
      {
        tail=NULL;
      }
      else if(tail==cur)
      {
          tail=prev;
      }
      cur->next=NULL;
      delete cur;



    }
}


bool circular(node*head)
{
    if(head==NULL){
        return true;
    }
    node*temp=head->next;

   while(temp!=NULL && temp!=head){
       
      temp=temp->next;
     }
     if(temp==head){
         return true;
     }
     return false;
}

bool detectloop(node * head)
{
    if(head==NULL){
        return false;
    }

    map<node*,bool> visited;
    node* temp=head;
    while(temp!=NULL)
    {
        if(visited[temp]==true)
        {
            cout<<"element present on "<<temp->data<<endl;
            return true;
        }
        visited[temp]=true;
        temp=temp->next;
        
    }
    return false;

}

bool floyddetect(node* head)
{
    if(head==NULL){
        return false;
    }

    node* slow=head;
    node* fast=head;
    while(slow==NULL && fast==NULL)
    {
        fast=fast->next;
        if(fast!=NULL)
        fast=fast->next;

        slow=slow->next;
        if(slow==fast)
        return true; 


    }
    return false;
    



}



int main()
{
   
   node*tail=NULL;
   insertnode(tail,3,1);
   print(tail);
   insertnode(tail,1,2);
   print(tail);
   insertnode(tail,1,3);
   print(tail);
   insertnode(tail,2,4);
   print(tail);
   deletion(tail,1);
   print(tail);
   cout<<"circular or not "<<circular(tail); 
    

    return 0;
}
