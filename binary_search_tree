#include<iostream>
#include<bits/stdc++.h>
#include<queue>
using namespace std;

/*
class node{
   public:
   int data;
   node* left;
   node* right;

   node(int d){
       this->data=d;
       this->left= NULL;
       this->right=NULL;
   }

};

        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else {

node* createBST (node * root,int data)
{
    //base case
    if(root==NULL)
    {
        root= new node(data);
        return root;
    }
    if(data > root->data)
    {
        root->right= createBST(root->right,data);
    }
    else
    {
        root->left=createBST(root->left,data);
    }
        
}
void insertintoBST(node* &root)
{
    int data;
    cin>>data;

    while(data != -1)
    {
        root= createBST(root,data);
        cin>>data;
       
    }
}

void levelordertraversal(node * root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty())
    {
        node * temp= q.front();
        q.pop();

        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else {

        
            cout<< temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}  

pair<int,int> MinMax(node* root){
    pair<int,int> res;
    node* temp=root;
    while(temp->left!=NULL){
        temp=temp->left;
    }
    res.first= temp->data;

    temp=root;
    while(temp->right!=NULL){
        temp=temp->right;
    }
    res.second= temp->data;
    return res;
}

node * deleteBST (node* root, int val)
{
    // base case 
    if(root==NULL){
        return root;
    }

    if( root->data == val)
    {
        // 0 child
        if(root->left == NULL && root->right == NULL){
            delete root;
            return NULL;
        }

        // 1 child 
        
        // left child
        if(root->left != NULL && root->right == NULL){
            node* temp = root->left;
            delete root;
            return temp;
        }

        // right child 
        if(root->left == NULL && root->right != NULL){
            node * temp = root->right;
            delete root;
            return temp;
        }

        // 2 child
        if(root->left != NULL && root->right != NULL){
            int mini = MinMax(root->right).first;
            root->data = mini;
            root->right = deleteBST(root->right , mini);
            return root;
        } 


    }

    else if( root->data > val){
        root->left= deleteBST(root->left,val);
    }
    else 
    {
        root->right= deleteBST(root->right,val);
    }
}
int main()
{
    node* root= NULL;
    insertintoBST(root);

    levelordertraversal(root);
    cout << "min value :" << MinMax(root).first<<endl ;
    cout << "max value :" << MinMax(root).second<<endl;

    deleteBST(root,10 );
    
     
    levelordertraversal(root);
    cout<<"min value :"<<MinMax(root).first<<endl;
    cout<<"max value :"<<MinMax(root).second<<endl;
 
    return 0;
}


*/
