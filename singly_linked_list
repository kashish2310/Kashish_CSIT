//singly linked list

class node
{
public:
    int data;
    node* next;
    
    node(int data){
        this->data=data;
        this->next=NULL;
    }
    ~node(){
        int value=this->data;
        if(this->next!=NULL){
            delete next;
            this->next=NULL;
        }
        cout<<"delete  "<< value<<endl;
    }

};

void insertathead(node* &head,int d){
    node* temp= new node(d);
    temp->next=head;
    head=temp;
}

void insertattail(node* &tail,int d)
{
    node* temp=new node(d);
    tail->next=temp;
    tail=tail->next;

}

void insertatposition(node* &head,int position,int d){
    node*temp=head;
   int count=1;
    while(count<position-1){
      temp=temp->next;
        count++;
    }
//insert 
node* nodetoinsert=new node(d);
nodetoinsert->next=temp->next;
temp->next=nodetoinsert;

}
void print(node* &head){
node* temp=head;
while(temp!=NULL){
    cout<<temp->data<<" ";
    temp=temp->next;
}cout<<endl;
}



//delete

void deletenode(int position,node* &head){
    //first
   
    if(position==1){
         node* temp=head;
       head=head->next;
       temp->next=NULL;
       delete temp;
    }
    //at any position
    else{
        node*cur=head;
        node* pre=NULL;
        int count=1;
        while(count<position){
            pre=cur;
            cur=cur->next;
              count++;
        }
        pre->next=cur->next;
        cur->next=NULL;
        delete cur;
    }

}

bool circular(node*head)
{
    if(head==NULL){
        return true;
    }
    node*temp=head->next;

   while(temp!=NULL && temp!=head){
      temp=temp->next;
     }
     if(temp==head){
         return true;
     }
     return false;
}

bool detectloop(node * head)
{
    if(head==NULL){
        return false;
    }

    map<node*,bool> visited;
    node* temp=head;
    while(temp!=NULL)
    {
        if(visited[temp]==true)
        {
            cout<<"element present on "<<temp->data<<endl;
            return true;
        }
        visited[temp]=true;
        temp=temp->next;
        
    }
    return false;

}

bool floyddetect(node* head)
{
    if(head==NULL){
        return false;
    }

    node* slow=head;
    node* fast=head;
    while(slow!=NULL && fast!=NULL)
    {
        fast=fast->next;
        if(fast!=NULL)
        fast=fast->next;

        slow=slow->next;
        if(slow==fast){
        cout<<" element "<<slow->data<<endl;
        return true; 
        }

    }
    return false;
}

node* getstartnode(node* head)
{
    if(head==NULL){
        return NULL;
    }

    node*slow=head;
    node*fast=head;
    while(slow!=NULL && fast!=NULL)
    {
        fast=fast->next;
        if(fast!=NULL)
        fast=fast->next;

        slow=slow->next;
        if(slow==fast){
            slow=head;
            while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
            }
            cout<<slow->data<<endl;
            return slow;
        }
    }
}

void deleteloop(node* head)
{
    if(head==NULL){
        return;
    }
    node*startpoint=getstartnode(head);
    node*temp=startpoint;
    while(temp->next!=startpoint){
        temp=temp->next;
    }
    temp->next=NULL;
}


void lastelement(node* &head){
    node*cur=head;
    node*prev=NULL;
    while(cur->next!=NULL){
        prev=cur;
        cur=cur->next;
    }
    prev->next=cur->next;
    cur->next=head;
    head=cur;
}


int main(){
  
// cout<<node1->data<<endl;
//cout<<node1->next<<endl;
//create 

node* head=NULL;
//print(head);
node* tail=NULL;

insertathead(head,16);
print(head);
insertathead(head,20);
print(head);
insertatposition(head,3,15);
print(head);
//deletenode(1,head);
//print(head);
 //cout<<"circular or not "<<circular(tail);
tail->next=head->next;
print(head);
cout<<"  "<< getstartnode(head)->data<<endl;
deleteloop(head);
print(head);
cout<<"tealdk   "<<tail->next;
lastelement(head);
print(head);
return 0;

}

