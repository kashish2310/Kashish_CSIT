
                 // NEW TREE CREATION

class node{

   public:
   int data;
   node* left;
   node * right;

   node(int data){
    this ->data = data;
    this -> left=NULL;
    this ->right = NULL;
   } 
};

 
                   // CREATION OF TREE USING RECURSION
node * buildtree(node* root){
    cout<<"Enter the data of root :"<<endl;
    int data;
    cin>> data;

    root= new node(data);

    if(root->data == -1){
        return NULL;
    }

    cout<<"Enter the data of left node of :"<<root->data <<endl;
    root->left = buildtree(root->left);

    cout<<"Enter the data of right node of :"<<root->data <<endl;
    root->right = buildtree(root->right);

    return root; 
}
                 // CREATION USING LEVEL ORDER TRAVERSAL

node* createLEVEL(node* root){
    cout<<"Enter the root data :";
    int data ;
    cin>> data;
    root= new node(data);
    
    queue<node*> q;
    q.push(root);

    while(!q.empty()){
        node * temp= q.front();
        q.pop();

        
        cout<<"Enter the data of left node of :"<<temp->data<<endl;
        int leftnode ;
        cin>> leftnode;
        
        if(leftnode != -1){
            temp->left=new node(leftnode);
            q.push(temp->left);
        }
       
        cout<<"Enter the data of right node of :"<<temp->data<<endl;
        int rightnode ;
        cin>> rightnode;
        
        if(rightnode != -1){
            temp->right=new node(rightnode);
            q.push(temp->right);
        }
        
    }
    return root;
}

                 // LEVEL ORDER TRAVERSAL
void levelorderTraversal(node * root){
    queue<node*> q;
    q.push(root);
    
    while(!q.empty()){
       node * temp= q.front();
       q.pop();

       cout<<temp->data<<" ";

       if(temp->left ){
        q.push(temp->left);
       }

       if(temp->right ){
        q.push(temp->right);
       }
    }
}
             
              // REVERSE LEVEL ORDER TRAVERSAL
void reverseLevel( node* root){
    queue<node*> q;
    stack<node*> s;
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();

        s.push(temp);

        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
    }

    while(!s.empty()){
        node*temp =s.top();
        s.pop();
        cout<<temp->data<<" ";
    }
}

                // INORDER TRAVERSAL
void inorder(node * root){
    if(root== NULL){
        return;
    }

    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
 
               // MIRROR OF A TREE
void mirror(node * root,vector<int> &ans){
    if(root== NULL){
        return;
    }

    mirror(root->left,ans);
    ans.push_back(root->data);
    mirror(root->right,ans);
}

              // INORDER ITERATIVE TRAVERSAL
void InOrder(node* root){
    stack<node*> s;
    
    node* curr= root; 

    while(!s.empty() || curr != NULL){
        
        if(curr !=NULL){
            s.push(curr);
            curr=curr->left;
        }
        else {
            curr = s.top();
            s.pop();
            cout<<curr->data<<" ";
            curr=curr->right;
        }
    }
}


                // PREORDER TRAVERSAL
void preorder(node * root){
    if(root== NULL){
        return;
    }

    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

                // PREORDER ITERAVTIVE TRAVERSAL 
void PreOrder(node* root){
    stack<node*> s;
    s.push(root);
    while(!s.empty()){
        node* temp=s.top();
        s.pop();

        cout<<temp->data<<" ";
        if(temp->right){
            s.push(temp->right);
        }
        if(temp->left){
            s.push(temp->left);
        }
    }
}

                // POSTORDER TRAVERSAL
void postorder(node * root){
    if(root== NULL){
        return;
    }

    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

              // POSTORDER ITERATIVE TRAVERSAL
void PostOrder(node* root){
    stack<node*> s1;
    stack<node*> s2;
     
    s1.push(root);
    while(!s1.empty()){
        node*temp= s1.top();
        s1.pop();

        s2.push(temp);

        if(temp->left){
            s1.push(temp->left);
        }
        if(temp->right){
            s1.push(temp->right);
        }
    }

    while(!s2.empty()){
        node* curr = s2.top();
        s2.pop();
        cout<<curr->data<<" ";
    }
}


node* Mirror(node*root){
    if(root==NULL){
        return root;    
    }

    node*temp= root->left;
    root->left=root->right;
    root->right=temp;

    if(root->left){
        Mirror(root->left);
    }

    if(root->right){
        Mirror(root->right);
    }
    return root;
}


void inorderforBST(int a[], vector<int> &v , int size , int index){
      
      if(index>=size){
        return;
      }

    inorderforBST(a,v,size,2*index+1);
    v.push_back(a[index]);
    inorderforBST(a,v,size,2*index+2);
}

int minswap(vector<int> &v){
    vector<pair<int,int>> temp(v.size());
    for(int i=0;i<v.size();i++){
        temp[i].first= v[i];
        temp[i].second=i;
    }
    sort(temp.begin(),temp.end());

    int count=0;
    for(int i=0;i<temp.size();i++){
        if(temp[i].second == i){
            continue;
        }
        else {
            count++;
            swap(temp[i],temp[temp[i].second]);
            --i;
        }
    }
    return count;
}
bool checkMirror(node * a , node* b){
    if(a == NULL && b == NULL){
        return true;
    }
    if(a==NULL || b==NULL){
        return false;
    }
   

    return a->data==b->data && checkMirror(a->left, b->right) && checkMirror(a->right ,b->left);
}
int main(){
   
    node * roota= NULL;
    node * rootb=NULL;
   // root= buildtree(root);
    // 1 2 3 -1 -1 4 -1 -1 5 6 -1 -1 7 -1 -1
   
    roota = createLEVEL(roota);
    //1 3 2 -1 -1 5 4 -1 -1 -1 -1

    // 1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1 
    rootb = createLEVEL(rootb);
    //1 2 3  4 5 -1 -1 -1 -1 -1 -1

   cout<<"LEVEL ORDER TRAVERSAL"<<endl;
   levelorderTraversal(roota);  
   cout<<endl;
   
   cout<<"LEVEL ORDER TRAVERSAL"<<endl;
   levelorderTraversal(rootb);  
   cout<<endl;

   cout<< checkMirror(roota,rootb);
   /*
   cout<<"REVERSE LEVEL ORDER TRAVERSAL"<<endl;
   reverseLevel(root);  
   cout<<endl;
   
   cout<<"INORDER TRAVERSAL"<<endl;
   inorder(root);  
   cout<<endl;
   
   cout<<"INORDER ITERATIVE TRAVERSAL"<<endl;
   InOrder(root);  
   cout<<endl;

    vector<int> ans;
    
   cout<<"MIRROR OF A TREE"<<endl;
   mirror(root,ans);
   reverse(ans.begin(),ans.end());
   for(int i=0;i<ans.size();i++){
    cout<<ans[i]<<" ";
   }
   cout<<endl;

   cout<<"POSTORDER TRAVERSAL"<<endl;
   postorder(root);  
   cout<<endl;

   cout<<"POSTORDER ITERATIVE TRAVERSAL"<<endl;
   PostOrder(root);  
   cout<<endl;
   
   cout<<"PREORDER TRAVERSAL"<<endl;
   preorder(root);  
   cout<<endl;
   
   cout<<"PREORDER ITERATIVE TRAVERSAL"<<endl;
   PreOrder(root);  
   cout<<endl;

   cout<<"MIRROR BY SWAP"<<endl;
   root = Mirror(root); 
   inorder(root);
   cout<<endl;
   */
   /*
   int n; 
   cin>>n;
   int a[n];
   vector<int> v;
   for(int i=0;i<n;i++){
    cin>>a[i];
   }
   cout<<"MINIMUM SWAPS REQ> TO MAKE BST"<<endl;
   inorderforBST(a,v,n,0);
   for(int i=0;i<n;i++){
    cout<<v[i]<<" ";
   }
   cout<<endl;
   int ans= minswap(v);
   cout<<ans;
   */
}
