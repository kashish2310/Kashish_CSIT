#include<iostream>
#include<math.h>
using namespace std;


/*
// factorial of a number

int fact(int n){

    if(n==0){
        return 1;
    }
    n=n*fact(n-1);
    return n;
}
int main(){
    int n,ans;
    cout<<"enter n";
    cin>>n;
      ans= fact(n);
    cout<<ans;
} 
*/

//powr of 2
/*
int power(int n){
    if(n==0)
    return 1;

    int pro=2*power(n-1);
    return pro;
} 
int main(){
    int n;
    cin>>n;
    int ans;
    ans=power(n);
    cout<<"power of funct"<<ans;
}*/
/*
int print(int n){
    if(n==0)
    return 1;
   cout<<n<<" ";
    print(n-1);
    
}
int main(){
    int n;
    cin>>n;
    print(n);
}
*/

//fibonacci series;
/*
int fibo(int n){
    if(n==0)
    return 0;
    if(n==1)
    return 1;
    int p;
    p= fibo(n-1)+fibo(n-2);
    return p;
}
int main(){
    int n;
    cin>>n;
    int ans=fibo(n);
    cout<<ans<<" ";
}
*/

//array is sorted or not
/*
bool sort(int arr[],int size){
    if(size==0||size==1)
    return true;
    if(arr[0]>arr[1])
    return false;
    else{
     bool ans= sort(arr+1,size-1);
     return ans;
    }
}
int main()
{
int size;
cin>>size;
int arr[size];
bool ans;
for(int i=0;i<size;i++)
{
    cin>>arr[i];
}
ans = sort(arr,size);
if(ans)
cout<<"sorted";
else
cout<<"not";
}
*/



// sum of array
/*
int sum(int arr[],int size){
    if(size==0)
    return 0;
    if(size==1)
    return arr[0];

    int s = arr[0]+ sum(arr+1,size-1);
    return s;
}
int main()
{
    int size,s ;
    
    cin>>size;
    int arr[size];
    for( int i=0; i<size;i++){
        cin>>arr[i];
    }
    s=sum(arr,size);
    cout<<s;
}*/



//linear search
/*
int search(int arr[],int size,int key){

    if(size==0)
    return 0;
    if(arr[0]==key)

    return 1;
    
    int ans=search(arr+1,size-1,key);
    return ans;
}
int main()
{
    int size,key ;
int s;
    
    cin>>size;
    cin>>key;
    int arr[size];
    for( int i=0; i<size;i++){
        cin>>arr[i];
    }
    s=search(arr,size,key);
    if(s==1)
    cout<<"found";
    else if(s!=1)
    cout<<"not found";
} */


//binar search
/*
bool search(int arr[] ,int start, int last,int key)
{   
    
    if(start>last)
    return false;
    int mid=start + (last-start)/2;
    if(arr[mid]==key)
    return true;
    
    if(arr[mid]<key){
   return search(arr,mid+1,last,key);
    
    } 
    else{
        return search(arr,start,mid-1,key);
    } 
}
int main()
{
 
 int size,key;
   
    cin>>size;
    cin>>key;
    int arr[size];
    for( int i=0; i<size;i++){
        cin>>arr[i];
    }
   cout<<"present or not"<< search(arr,0,size,key);
   return 0;
}
*/
/*
class Solution {
  private :
    void solve(vector<int> &candidates,  int index ,int target, vector<int> output ,vector<vector<int>> &ans )
{
    if(index==candidates.size()){
        if(target==0 ){
            ans.push_back(output);
        }
        return;
    }
    
    //exclude
    solve(candidates,index+1,target,output,ans);
    //include
    output.push_back(candidates[index]);
    solve(candidates ,index+1,target-candidates[index],output,ans);
}    
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        int index=0;
       vector<int> output;
        solve(candidates,index,target,output,ans);
        return ans;
        
    }
};*/
int power(int a,int b)
{
    //base condition
    if(b==0)
    return 1;
    if(b==1)
    return a;


    // recursive relation

    if(b%2==0)
    return power(a,b/2)*power(a,b/2);

    if(b%2!=0)
    return power(a,b/2)*power(a,b/2)*a;




}
int main(){
    int a, b;
    cin>>a>>b;

    cout<<power(a,b);
}
